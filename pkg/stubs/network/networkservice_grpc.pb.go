// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: network/networkservice.proto

// Network gRPC service

package networkservice

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkService_GetAllResources_FullMethodName = "/networkservice.NetworkService/GetAllResources"
)

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServiceClient interface {
	GetAllResources(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NetworkService_GetAllResourcesClient, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) GetAllResources(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NetworkService_GetAllResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkService_ServiceDesc.Streams[0], NetworkService_GetAllResources_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceGetAllResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkService_GetAllResourcesClient interface {
	Recv() (*Resource, error)
	grpc.ClientStream
}

type networkServiceGetAllResourcesClient struct {
	grpc.ClientStream
}

func (x *networkServiceGetAllResourcesClient) Recv() (*Resource, error) {
	m := new(Resource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility
type NetworkServiceServer interface {
	GetAllResources(*empty.Empty, NetworkService_GetAllResourcesServer) error
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (UnimplementedNetworkServiceServer) GetAllResources(*empty.Empty, NetworkService_GetAllResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllResources not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_GetAllResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceServer).GetAllResources(m, &networkServiceGetAllResourcesServer{stream})
}

type NetworkService_GetAllResourcesServer interface {
	Send(*Resource) error
	grpc.ServerStream
}

type networkServiceGetAllResourcesServer struct {
	grpc.ServerStream
}

func (x *networkServiceGetAllResourcesServer) Send(m *Resource) error {
	return x.ServerStream.SendMsg(m)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networkservice.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllResources",
			Handler:       _NetworkService_GetAllResources_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network/networkservice.proto",
}
