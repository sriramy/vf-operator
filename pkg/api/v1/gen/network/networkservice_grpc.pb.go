// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: network/networkservice.proto

// Network gRPC service

package networkservice

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkService_GetAllResourceConfigs_FullMethodName = "/networkservice.NetworkService/GetAllResourceConfigs"
	NetworkService_CreateResourceConfig_FullMethodName  = "/networkservice.NetworkService/CreateResourceConfig"
	NetworkService_GetResourceConfig_FullMethodName     = "/networkservice.NetworkService/GetResourceConfig"
	NetworkService_DeleteResourceConfig_FullMethodName  = "/networkservice.NetworkService/DeleteResourceConfig"
	NetworkService_GetAllResources_FullMethodName       = "/networkservice.NetworkService/GetAllResources"
	NetworkService_GetResource_FullMethodName           = "/networkservice.NetworkService/GetResource"
)

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServiceClient interface {
	GetAllResourceConfigs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResourceConfigs, error)
	CreateResourceConfig(ctx context.Context, in *ResourceConfig, opts ...grpc.CallOption) (*Resource, error)
	GetResourceConfig(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*ResourceConfig, error)
	DeleteResourceConfig(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllResources(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Resources, error)
	GetResource(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*Resource, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) GetAllResourceConfigs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResourceConfigs, error) {
	out := new(ResourceConfigs)
	err := c.cc.Invoke(ctx, NetworkService_GetAllResourceConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) CreateResourceConfig(ctx context.Context, in *ResourceConfig, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, NetworkService_CreateResourceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetResourceConfig(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*ResourceConfig, error) {
	out := new(ResourceConfig)
	err := c.cc.Invoke(ctx, NetworkService_GetResourceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) DeleteResourceConfig(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, NetworkService_DeleteResourceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetAllResources(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Resources, error) {
	out := new(Resources)
	err := c.cc.Invoke(ctx, NetworkService_GetAllResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetResource(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, NetworkService_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility
type NetworkServiceServer interface {
	GetAllResourceConfigs(context.Context, *empty.Empty) (*ResourceConfigs, error)
	CreateResourceConfig(context.Context, *ResourceConfig) (*Resource, error)
	GetResourceConfig(context.Context, *ResourceName) (*ResourceConfig, error)
	DeleteResourceConfig(context.Context, *ResourceName) (*empty.Empty, error)
	GetAllResources(context.Context, *empty.Empty) (*Resources, error)
	GetResource(context.Context, *ResourceName) (*Resource, error)
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (UnimplementedNetworkServiceServer) GetAllResourceConfigs(context.Context, *empty.Empty) (*ResourceConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllResourceConfigs not implemented")
}
func (UnimplementedNetworkServiceServer) CreateResourceConfig(context.Context, *ResourceConfig) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceConfig not implemented")
}
func (UnimplementedNetworkServiceServer) GetResourceConfig(context.Context, *ResourceName) (*ResourceConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceConfig not implemented")
}
func (UnimplementedNetworkServiceServer) DeleteResourceConfig(context.Context, *ResourceName) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceConfig not implemented")
}
func (UnimplementedNetworkServiceServer) GetAllResources(context.Context, *empty.Empty) (*Resources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllResources not implemented")
}
func (UnimplementedNetworkServiceServer) GetResource(context.Context, *ResourceName) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_GetAllResourceConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetAllResourceConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetAllResourceConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetAllResourceConfigs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_CreateResourceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).CreateResourceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_CreateResourceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).CreateResourceConfig(ctx, req.(*ResourceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetResourceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetResourceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetResourceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetResourceConfig(ctx, req.(*ResourceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_DeleteResourceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).DeleteResourceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_DeleteResourceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).DeleteResourceConfig(ctx, req.(*ResourceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetAllResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetAllResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetAllResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetAllResources(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetResource(ctx, req.(*ResourceName))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networkservice.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllResourceConfigs",
			Handler:    _NetworkService_GetAllResourceConfigs_Handler,
		},
		{
			MethodName: "CreateResourceConfig",
			Handler:    _NetworkService_CreateResourceConfig_Handler,
		},
		{
			MethodName: "GetResourceConfig",
			Handler:    _NetworkService_GetResourceConfig_Handler,
		},
		{
			MethodName: "DeleteResourceConfig",
			Handler:    _NetworkService_DeleteResourceConfig_Handler,
		},
		{
			MethodName: "GetAllResources",
			Handler:    _NetworkService_GetAllResources_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _NetworkService_GetResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/networkservice.proto",
}
