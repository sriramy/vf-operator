// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: network/networkservice.proto

// Network gRPC service

package networkservice

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceService_CreateResourceConfig_FullMethodName  = "/networkservice.ResourceService/CreateResourceConfig"
	ResourceService_DeleteResourceConfig_FullMethodName  = "/networkservice.ResourceService/DeleteResourceConfig"
	ResourceService_GetAllResourceConfigs_FullMethodName = "/networkservice.ResourceService/GetAllResourceConfigs"
	ResourceService_GetResourceConfig_FullMethodName     = "/networkservice.ResourceService/GetResourceConfig"
	ResourceService_GetAllResources_FullMethodName       = "/networkservice.ResourceService/GetAllResources"
	ResourceService_GetResource_FullMethodName           = "/networkservice.ResourceService/GetResource"
)

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	CreateResourceConfig(ctx context.Context, in *ResourceConfig, opts ...grpc.CallOption) (*Resource, error)
	DeleteResourceConfig(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllResourceConfigs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResourceConfigs, error)
	GetResourceConfig(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*ResourceConfig, error)
	GetAllResources(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Resources, error)
	GetResource(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*Resource, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) CreateResourceConfig(ctx context.Context, in *ResourceConfig, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ResourceService_CreateResourceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteResourceConfig(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ResourceService_DeleteResourceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetAllResourceConfigs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResourceConfigs, error) {
	out := new(ResourceConfigs)
	err := c.cc.Invoke(ctx, ResourceService_GetAllResourceConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceConfig(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*ResourceConfig, error) {
	out := new(ResourceConfig)
	err := c.cc.Invoke(ctx, ResourceService_GetResourceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetAllResources(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Resources, error) {
	out := new(Resources)
	err := c.cc.Invoke(ctx, ResourceService_GetAllResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResource(ctx context.Context, in *ResourceName, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ResourceService_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility
type ResourceServiceServer interface {
	CreateResourceConfig(context.Context, *ResourceConfig) (*Resource, error)
	DeleteResourceConfig(context.Context, *ResourceName) (*empty.Empty, error)
	GetAllResourceConfigs(context.Context, *empty.Empty) (*ResourceConfigs, error)
	GetResourceConfig(context.Context, *ResourceName) (*ResourceConfig, error)
	GetAllResources(context.Context, *empty.Empty) (*Resources, error)
	GetResource(context.Context, *ResourceName) (*Resource, error)
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (UnimplementedResourceServiceServer) CreateResourceConfig(context.Context, *ResourceConfig) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceConfig not implemented")
}
func (UnimplementedResourceServiceServer) DeleteResourceConfig(context.Context, *ResourceName) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceConfig not implemented")
}
func (UnimplementedResourceServiceServer) GetAllResourceConfigs(context.Context, *empty.Empty) (*ResourceConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllResourceConfigs not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceConfig(context.Context, *ResourceName) (*ResourceConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceConfig not implemented")
}
func (UnimplementedResourceServiceServer) GetAllResources(context.Context, *empty.Empty) (*Resources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllResources not implemented")
}
func (UnimplementedResourceServiceServer) GetResource(context.Context, *ResourceName) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_CreateResourceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateResourceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateResourceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateResourceConfig(ctx, req.(*ResourceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteResourceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteResourceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteResourceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteResourceConfig(ctx, req.(*ResourceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetAllResourceConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetAllResourceConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetAllResourceConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetAllResourceConfigs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetResourceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceConfig(ctx, req.(*ResourceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetAllResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetAllResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetAllResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetAllResources(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResource(ctx, req.(*ResourceName))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networkservice.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResourceConfig",
			Handler:    _ResourceService_CreateResourceConfig_Handler,
		},
		{
			MethodName: "DeleteResourceConfig",
			Handler:    _ResourceService_DeleteResourceConfig_Handler,
		},
		{
			MethodName: "GetAllResourceConfigs",
			Handler:    _ResourceService_GetAllResourceConfigs_Handler,
		},
		{
			MethodName: "GetResourceConfig",
			Handler:    _ResourceService_GetResourceConfig_Handler,
		},
		{
			MethodName: "GetAllResources",
			Handler:    _ResourceService_GetAllResources_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ResourceService_GetResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/networkservice.proto",
}

const (
	NetworkAttachmentService_CreateNetworkAttachment_FullMethodName  = "/networkservice.NetworkAttachmentService/CreateNetworkAttachment"
	NetworkAttachmentService_DeleteNetworkAttachment_FullMethodName  = "/networkservice.NetworkAttachmentService/DeleteNetworkAttachment"
	NetworkAttachmentService_GetAllNetworkAttachments_FullMethodName = "/networkservice.NetworkAttachmentService/GetAllNetworkAttachments"
	NetworkAttachmentService_GetNetworkAttachment_FullMethodName     = "/networkservice.NetworkAttachmentService/GetNetworkAttachment"
)

// NetworkAttachmentServiceClient is the client API for NetworkAttachmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkAttachmentServiceClient interface {
	CreateNetworkAttachment(ctx context.Context, in *NetworkAttachment, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteNetworkAttachment(ctx context.Context, in *NetworkAttachmentName, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllNetworkAttachments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetworkAttachments, error)
	GetNetworkAttachment(ctx context.Context, in *NetworkAttachmentName, opts ...grpc.CallOption) (*NetworkAttachment, error)
}

type networkAttachmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkAttachmentServiceClient(cc grpc.ClientConnInterface) NetworkAttachmentServiceClient {
	return &networkAttachmentServiceClient{cc}
}

func (c *networkAttachmentServiceClient) CreateNetworkAttachment(ctx context.Context, in *NetworkAttachment, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, NetworkAttachmentService_CreateNetworkAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAttachmentServiceClient) DeleteNetworkAttachment(ctx context.Context, in *NetworkAttachmentName, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, NetworkAttachmentService_DeleteNetworkAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAttachmentServiceClient) GetAllNetworkAttachments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetworkAttachments, error) {
	out := new(NetworkAttachments)
	err := c.cc.Invoke(ctx, NetworkAttachmentService_GetAllNetworkAttachments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAttachmentServiceClient) GetNetworkAttachment(ctx context.Context, in *NetworkAttachmentName, opts ...grpc.CallOption) (*NetworkAttachment, error) {
	out := new(NetworkAttachment)
	err := c.cc.Invoke(ctx, NetworkAttachmentService_GetNetworkAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkAttachmentServiceServer is the server API for NetworkAttachmentService service.
// All implementations must embed UnimplementedNetworkAttachmentServiceServer
// for forward compatibility
type NetworkAttachmentServiceServer interface {
	CreateNetworkAttachment(context.Context, *NetworkAttachment) (*empty.Empty, error)
	DeleteNetworkAttachment(context.Context, *NetworkAttachmentName) (*empty.Empty, error)
	GetAllNetworkAttachments(context.Context, *empty.Empty) (*NetworkAttachments, error)
	GetNetworkAttachment(context.Context, *NetworkAttachmentName) (*NetworkAttachment, error)
	mustEmbedUnimplementedNetworkAttachmentServiceServer()
}

// UnimplementedNetworkAttachmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkAttachmentServiceServer struct {
}

func (UnimplementedNetworkAttachmentServiceServer) CreateNetworkAttachment(context.Context, *NetworkAttachment) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkAttachment not implemented")
}
func (UnimplementedNetworkAttachmentServiceServer) DeleteNetworkAttachment(context.Context, *NetworkAttachmentName) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkAttachment not implemented")
}
func (UnimplementedNetworkAttachmentServiceServer) GetAllNetworkAttachments(context.Context, *empty.Empty) (*NetworkAttachments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNetworkAttachments not implemented")
}
func (UnimplementedNetworkAttachmentServiceServer) GetNetworkAttachment(context.Context, *NetworkAttachmentName) (*NetworkAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkAttachment not implemented")
}
func (UnimplementedNetworkAttachmentServiceServer) mustEmbedUnimplementedNetworkAttachmentServiceServer() {
}

// UnsafeNetworkAttachmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkAttachmentServiceServer will
// result in compilation errors.
type UnsafeNetworkAttachmentServiceServer interface {
	mustEmbedUnimplementedNetworkAttachmentServiceServer()
}

func RegisterNetworkAttachmentServiceServer(s grpc.ServiceRegistrar, srv NetworkAttachmentServiceServer) {
	s.RegisterService(&NetworkAttachmentService_ServiceDesc, srv)
}

func _NetworkAttachmentService_CreateNetworkAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkAttachment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAttachmentServiceServer).CreateNetworkAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkAttachmentService_CreateNetworkAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAttachmentServiceServer).CreateNetworkAttachment(ctx, req.(*NetworkAttachment))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAttachmentService_DeleteNetworkAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkAttachmentName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAttachmentServiceServer).DeleteNetworkAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkAttachmentService_DeleteNetworkAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAttachmentServiceServer).DeleteNetworkAttachment(ctx, req.(*NetworkAttachmentName))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAttachmentService_GetAllNetworkAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAttachmentServiceServer).GetAllNetworkAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkAttachmentService_GetAllNetworkAttachments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAttachmentServiceServer).GetAllNetworkAttachments(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAttachmentService_GetNetworkAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkAttachmentName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAttachmentServiceServer).GetNetworkAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkAttachmentService_GetNetworkAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAttachmentServiceServer).GetNetworkAttachment(ctx, req.(*NetworkAttachmentName))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkAttachmentService_ServiceDesc is the grpc.ServiceDesc for NetworkAttachmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkAttachmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networkservice.NetworkAttachmentService",
	HandlerType: (*NetworkAttachmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetworkAttachment",
			Handler:    _NetworkAttachmentService_CreateNetworkAttachment_Handler,
		},
		{
			MethodName: "DeleteNetworkAttachment",
			Handler:    _NetworkAttachmentService_DeleteNetworkAttachment_Handler,
		},
		{
			MethodName: "GetAllNetworkAttachments",
			Handler:    _NetworkAttachmentService_GetAllNetworkAttachments_Handler,
		},
		{
			MethodName: "GetNetworkAttachment",
			Handler:    _NetworkAttachmentService_GetNetworkAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/networkservice.proto",
}
